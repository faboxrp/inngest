# Docker Compose configuration for Inngest self-hosted deployment
# Compatible with Coolify and production environments

version: '3.8'

services:
  # Inngest main service
  inngest:
    image: inngest/inngest:latest
    container_name: inngest-server
    command: "inngest start"
    ports:
      - "${INNGEST_PORT:-8288}:8288"      # Main API and Dashboard UI
      - "${INNGEST_CONNECT_PORT:-8289}:8289"  # Connect workers port
    environment:
      # Required authentication keys
      - INNGEST_EVENT_KEY=${INNGEST_EVENT_KEY}
      - INNGEST_SIGNING_KEY=${INNGEST_SIGNING_KEY}
      
      # External database connections
      - INNGEST_POSTGRES_URI=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - INNGEST_REDIS_URI=redis://redis:6379
      
      # Optional configuration
      - INNGEST_POLL_INTERVAL=${INNGEST_POLL_INTERVAL:-60}
      - INNGEST_QUEUE_WORKERS=${INNGEST_QUEUE_WORKERS:-100}
      - INNGEST_TICK=${INNGEST_TICK:-150}
      - INNGEST_RETRY_INTERVAL=${INNGEST_RETRY_INTERVAL:-0}
      
      # Logging configuration
      - INNGEST_LOG_LEVEL=${INNGEST_LOG_LEVEL:-info}
      - INNGEST_VERBOSE=${INNGEST_VERBOSE:-false}
      - INNGEST_JSON=${INNGEST_JSON:-false}
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    networks:
      - inngest-network
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8288/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Resource limits for production
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # PostgreSQL database for persistence
  postgres:
    image: postgres:17-alpine
    container_name: inngest-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-inngest}
      - POSTGRES_USER=${POSTGRES_USER:-inngest}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
      
      # Performance tuning
      - POSTGRES_SHARED_PRELOAD_LIBRARIES=pg_stat_statements
    
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d  # Optional init scripts
    
    networks:
      - inngest-network
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-inngest} -d ${POSTGRES_DB:-inngest}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    
    # PostgreSQL configuration for better performance
    command: >
      postgres
      -c shared_buffers=128MB
      -c effective_cache_size=512MB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB

  # Redis for queue and state store
  redis:
    image: redis:7-alpine
    container_name: inngest-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    
    volumes:
      - redis_data:/data
      - ./redis.conf:/etc/redis/redis.conf  # Optional custom config
    
    networks:
      - inngest-network
    
    restart: unless-stopped
    
    # Redis configuration for persistence and performance
    command: redis-server --appendonly yes --appendfsync everysec --save 900 1 --save 300 10 --save 60 10000
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
    name: inngest_postgres_data
  redis_data:
    driver: local
    name: inngest_redis_data

# Network configuration
networks:
  inngest-network:
    driver: bridge
    name: inngest_network
    ipam:
      config:
        - subnet: 172.20.0.0/16