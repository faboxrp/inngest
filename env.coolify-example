# Inngest Self-Hosted Environment Configuration for Coolify
# Copy this file to .env and configure the values according to your environment

# =============================================================================
# REQUIRED CONFIGURATION
# =============================================================================

# Event Key - Used by applications to send events to Inngest
# Generate a secure random string for production
INNGEST_EVENT_KEY=your_secure_event_key_here

# Signing Key - Must be a hexadecimal string with even number of characters
# Generate using: openssl rand -hex 32
INNGEST_SIGNING_KEY=your_64_character_hex_signing_key_here

# PostgreSQL Database Configuration
POSTGRES_DB=inngest
POSTGRES_USER=inngest
POSTGRES_PASSWORD=your_secure_postgres_password_here

# =============================================================================
# OPTIONAL CONFIGURATION
# =============================================================================

# Inngest Server Configuration
INNGEST_POLL_INTERVAL=60              # Polling interval for app updates (seconds)
INNGEST_QUEUE_WORKERS=100             # Number of executor workers
INNGEST_TICK=150                      # Queue polling interval (milliseconds)
INNGEST_RETRY_INTERVAL=0              # Retry interval for linear backoff (seconds)

# Logging Configuration
INNGEST_LOG_LEVEL=info                # Log level: trace, debug, info, warn, error
INNGEST_VERBOSE=false                 # Enable verbose logging
INNGEST_JSON=false                    # Output logs as JSON

# =============================================================================
# SECURITY CONSIDERATIONS FOR COOLIFY
# =============================================================================

# 1. Generate secure keys:
#    Event Key: Use a strong random string
#    Signing Key: openssl rand -hex 32
#
# 2. Use strong passwords for database
#
# 3. Coolify handles:
#    - SSL/TLS certificates automatically
#    - Domain routing and proxy configuration
#    - Container orchestration and networking
#
# 4. All database services are isolated (no external access)

# =============================================================================
# SDK CONFIGURATION FOR APPLICATIONS
# =============================================================================

# For Node.js applications connecting to this self-hosted instance:
# INNGEST_EVENT_KEY=same_as_above
# INNGEST_SIGNING_KEY=same_as_above
# INNGEST_DEV=0
# INNGEST_BASE_URL=https://your-coolify-assigned-domain

# =============================================================================
# COOLIFY DEPLOYMENT NOTES
# =============================================================================

# 1. Import this docker-compose.yml in Coolify
# 2. Set environment variables in Coolify's interface
# 3. Coolify will automatically:
#    - Assign domains/subdomains
#    - Handle SSL certificates via Let's Encrypt
#    - Manage container networking
#    - Provide logging and monitoring interface
# 4. Main service will be accessible on port 8288 (Coolify routes externally)
# 5. Connect gateway on port 8289 (if needed as separate service)

# =============================================================================
# RESOURCE SCALING
# =============================================================================

# You can adjust these values based on your server capacity:
# - INNGEST_QUEUE_WORKERS: More workers = higher concurrency
# - INNGEST_TICK: Lower values = faster processing (more CPU usage)
# - PostgreSQL shared_buffers: Adjust based on available RAM
# - No hard limits set - containers will use available resources

# =============================================================================
# BACKUP AND MAINTENANCE
# =============================================================================

# Coolify provides built-in features:
# - Volume backups through Coolify interface
# - Container logs accessible via dashboard
# - Easy scaling and updates through UI
# - Monitoring and health checks integrated