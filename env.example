# Inngest Self-Hosted Environment Configuration
# Copy this file to .env and configure the values according to your environment

# =============================================================================
# REQUIRED CONFIGURATION
# =============================================================================

# Event Key - Used by applications to send events to Inngest
# Generate a secure random string for production
INNGEST_EVENT_KEY=your_secure_event_key_here

# Signing Key - Must be a hexadecimal string with even number of characters
# Generate using: openssl rand -hex 32
INNGEST_SIGNING_KEY=your_64_character_hex_signing_key_here

# PostgreSQL Database Configuration
POSTGRES_DB=inngest
POSTGRES_USER=inngest
POSTGRES_PASSWORD=your_secure_postgres_password_here

# =============================================================================
# OPTIONAL CONFIGURATION
# =============================================================================

# Port Configuration
INNGEST_PORT=8288
INNGEST_CONNECT_PORT=8289
POSTGRES_PORT=5432
REDIS_PORT=6379

# Inngest Server Configuration
INNGEST_POLL_INTERVAL=60              # Polling interval for app updates (seconds)
INNGEST_QUEUE_WORKERS=100             # Number of executor workers
INNGEST_TICK=150                      # Queue polling interval (milliseconds)
INNGEST_RETRY_INTERVAL=0              # Retry interval for linear backoff (seconds)

# Logging Configuration
INNGEST_LOG_LEVEL=info                # Log level: trace, debug, info, warn, error
INNGEST_VERBOSE=false                 # Enable verbose logging
INNGEST_JSON=false                    # Output logs as JSON

# Development Mode
INNGEST_DEV=0                         # Set to 1 for development mode
INNGEST_BASE_URL=http://localhost:8288 # Base URL for development mode

# =============================================================================
# SECURITY CONSIDERATIONS FOR PRODUCTION
# =============================================================================

# 1. Generate secure keys:
#    Event Key: Use a strong random string
#    Signing Key: openssl rand -hex 32
#
# 2. Use strong passwords for database
#
# 3. Consider using Docker secrets for sensitive data in production
#
# 4. Ensure proper network security and firewall rules
#
# 5. Regular backups of PostgreSQL data volume

# =============================================================================
# COOLIFY SPECIFIC NOTES
# =============================================================================

# When deploying with Coolify:
# 1. Import this docker-compose.yml file
# 2. Set environment variables in Coolify's interface
# 3. Ensure persistent volumes are properly configured
# 4. Configure reverse proxy/domain if needed
# 5. Set up monitoring and health checks

# =============================================================================
# SDK CONFIGURATION FOR APPLICATIONS
# =============================================================================

# For Node.js applications connecting to this self-hosted instance:
# INNGEST_EVENT_KEY=same_as_above
# INNGEST_SIGNING_KEY=same_as_above
# INNGEST_DEV=0
# INNGEST_BASE_URL=http://your-inngest-domain:8288

# =============================================================================
# BACKUP AND MAINTENANCE
# =============================================================================

# Recommended backup strategy:
# - PostgreSQL: Regular dumps using pg_dump
# - Redis: RDB snapshots are automatically saved
# - Monitor disk usage of data volumes
# - Regular health checks and monitoring